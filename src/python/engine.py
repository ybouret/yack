from ctypes import *import numpy as npclass Hasher:    def __init__(self, soname):        print('<Hasher Python Load>')        self.lib = cdll.LoadLibrary(soname)        self.__Quit = self.lib.HasherQuit        self.__Init = self.lib.HasherInit        self.__Init.restype = c_int        self.WasInit = self.lib.HasherWasInit        self.WasInit.restype = c_int        self.Get = self.lib.HasherGet        self.Get.restype = c_uint        self.Get.argstype = [c_char_p]    def __del__(self):        self.__Quit()        print('<Hasher Python Quit>')    def Init(self):        if (0 != self.__Init()):            raise OSError('C++ Init failure')class Engine:    def __init__(self, soname):        # load the library        print('<Engine Python Load>')        self.lib = cdll.LoadLibrary(soname)        # Quit function        self.Quit = self.lib.EngineQuit        # __Init function, here take the topology string        self.__Init = self.lib.EngineInit        self.__Init.restype = c_int        self.__Init.argtypes = [c_uint]        # WasInit() function        self.WasInit = self.lib.EngineWasInit        self.WasInit.restype = c_int        # if( 0 != self.Init(num_procs) ):        #    raise OSError('C++ code failure')        # average function, arguments are defined with numpy        self.Average         = self.lib.EngineAverage        self.Average.restype = c_double        self.Average.argtypes = [np.ctypeslib.ndpointer(dtype=np.float64,ndim=1,flags='C_CONTIGUOUS'),c_uint]        # process function, arguments are defined with numpy        # self.Process         = self.lib.EngineProcess        # self.Process.restype = c_int            # python Init function with args    def Init(self, topo):        if (0 != self.__Init(topo)):            raise ValueError('C++ code failure')    def __del__(self):        self.Quit()        print('<Engine Python Quit>')